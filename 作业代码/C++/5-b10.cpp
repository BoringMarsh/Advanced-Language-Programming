/*2151294 信11 马威*/
#include<iostream>
#include<iomanip>
using namespace std;

/***************************************************************************
  函数名称：zeller
  功    能：输入日期，求这一天的星期
  输入参数：int y：年份
            int m：月份
			int d：日
  返 回 值：int w：这一天的星期值
  说    明：1、此为第1个添加函数
			2、返回值中，星期日表示为0
***************************************************************************/
int zeller(int y, int m, int d)
{
	int W, w, c;     /*定义所需变量，W是通过算式算出来的所谓w值，w是W处理后的真正表示星期的数，c是年份的前两位*/

	if (m == 1 || m == 2) {     /*如果月份为1、2月，按上一年的13、14月处理*/
		m = m + 12;
		y = y - 1;
	}

	c = (y - y % 100) / 100;     /*取年份前两位*/
	y = y % 100;                 /*取年份后两位*/
	W = y + int(y / 4) + int(c / 4) - 2 * c + int(13 * (m + 1) / 5) + d - 1;     /*用算式算出W*/

	while (W < 0) {     /*若W为负数，反复加7直到其为正数为止*/
		W = W + 7;
	}

	w = W % 7;     /*用处理后的W除以7取余数，得到真正的w值*/
	return w;
}

/***************************************************************************
  函数名称：year
  功    能：通过正确性处理，输入并返回年份
  输入参数：无
  返 回 值：int y：正确的年份
  说    明：1、此为第2个添加函数
			2、无论错误与否，每次输入后都清空缓冲区
***************************************************************************/
int year()
{
	int y;
	while (1) {
		cout << "请输入年份[1900-2100]" << endl;
		cin >> y;

		if (y >= 1900 && y <= 2100 && cin.good() == 1) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			break;
		}

		else if ((y < 1900 || y>2100) && cin.good() == 1) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
		}

		else if ((y < 1900 || y>2100) && cin.good() == 0) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
		}
	}

	return y;
}

int main()
{
	system("mode con cols=120 lines=45");  /*调整cmd窗口的大小，使得日历能完整显示*/

	int m[12];          /*定义所需数组，m[12]是每月的天数*/
	int w[12];          /*定义所需数组，w[12]是每月1日的星期*/
	int month[12][42];  /*定义所需数组，month[12][42]是日历上每个月中，每个位置上的元素*/
	int y;              /*定义所需变量，y为年份*/
	int i, j, n, N;     /*定义所需变量，i、j为计数变量，n为每个季度输出数字的第n+1行，N为第N+1季度*/
	int if_endl;        /*定义所需变量，if_endl是每个季度输出第5行后，是否换行的标志*/

	/*1、通过正确性处理，给y赋值*/
	y = year();

	/*2、数组的初始化*/
	/*2.1、日历上每个月中，每个位置上元素的初始化*/
	for (i = 0; i < 12; i++) {
		for (j = 0; j < 42; j++) {
			month[i][j] = 0;
		}
	}

	/*2.2、每个月天数的初始化，其中2月通过判断y是否为闰年来赋值*/
	m[0] = m[2] = m[4] = m[6] = m[7] = m[9] = m[11] = 31;
	m[3] = m[5] = m[8] = m[10] = 30;

	if ((y % 4 == 0) && (y % 100 != 0) || (y % 4 == 0) && (y % 400 == 0)) {
		m[1] = 29;
	}

	else {
		m[1] = 28;
	}

	/*3、调用zeller()，求该年每个月1日的星期*/
	for (i = 0; i < 12; i++) {
		w[i] = zeller(y, i + 1, 1);
	}

	/*4、以w[i]为起点，m[i]为范围，给日历上对应位置的每一天赋值*/
	for (i = 0; i < 12; i++) {
		for (j = 1; j <= m[i]; j++) {
			month[i][w[i] + j - 1] = j;
		}
	}

	/*5、打印日历*/
	cout << y << "年的日历:" << endl << endl;  /*输出提示语及换行符*/

	/*按季度输出日历，N为第N+1季度*/
	for (N = 0; N < 4; N++) {

		/*5.1、后续通过每个季度第六行元素累加结果是否为零，来判断第六行元素是否都为零，故每个季度打印完成后，标志都需清零*/
		if_endl = 0;

		/*5.2、按季度打印月份标识*/
		if (N == 0) {
			cout << "            1月                             2月                             3月" << endl;
		}

		else if (N == 1) {
			cout << "            4月                             5月                             6月" << endl;
		}

		else if (N == 2) {
			cout << "            7月                             8月                             9月" << endl;
		}

		else {
			cout << "           10月                            11月                            12月" << endl;
		}

		/*5.3、不分季度，每打印完一次月份标识，打印一次星期标识*/
		cout << "Sun Mon Tue Wed Thu Fri Sat     Sun Mon Tue Wed Thu Fri Sat     Sun Mon Tue Wed Thu Fri Sat" << endl;

		/*5.4、从左到右，从上到下打印日历*/
		for (n = 0; n <= 5; n++) {  /*5.4.1、以n作循环变量，表示逐行输出*/
			for (i = 0 + 3 * N; i < 3 + 3 * N; i++) {  /*5.4.2、以i作循环变量，表示该行输出对应的三个月的日历*/
				for (j = 0 + 7 * n; j < 7 + 7 * n; j++) {  /*5.4.3、以j作循环变量，表示该行输出每个月对应的那七天的日历*/

					/*5.4.4、若对应位置元素为零，则不输出（只输出四个空格）；否则输出（左对齐，宽度为4）*/
					if (month[i][j] != 0) {
						cout << setw(4) << setiosflags(ios::left) << month[i][j];
					}

					else {
						cout << "    ";
					}
				}

				/*5.4.5、若该月为这一行的三个月中，最末尾的那个月，那么不再输出间隔用的4个空格*/
				if (i != 2 + 3 * N) {
					cout << "    ";
				}
			}

			/*5.4.6、输出第5行后，根据第六行元素是否全为零，判断是否换行*/
			if (n >= 0 && n < 4) {
				cout << endl;
			}

			else if (n == 4) {  /*输出完第五行的条件*/
				for (i = 0 + 3 * N; i < 3 + 3 * N; i++) {  /*以i作循环变量，表示取该行对应的三个月的元素*/
					for (j = 0 + 7 * (n + 1); j < 7 + 7 * (n + 1); j++) {  /*以j做循环变量，表示取下一行每个月对应那七天的元素*/
						if_endl = if_endl + month[i][j];
					}
				}

				/*累加，若不为零，表明第六行有元素需要输出，换行继续输出；否则，表明第六行为空，直接跳出循环，不再输出第六行*/
				if (if_endl != 0) {
					cout << endl;
				}

				else {
					break;
				}
			}
		}

		/*5.5、每个季度打印完成后的换行符（要让看起来空了一行，需要两个换行符）*/
		cout << endl << endl;
	}

	/*6、根据本程序与demo运行结果的比较，需添加一个换行符*/
	cout << endl;
	return 0;
}